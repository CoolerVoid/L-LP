##############################################################################
 INTRODUZIONE AL PROGETTO LEARNING-<Programming Language>
##############################################################################
Il progetto Learning-<Programming Language> mira a realizzare un manuale 
code oriented su alcuni dei linguaggi di programmazione maggiormente 
utilizzati sui sistemi operativi UNIX con kernel Linux.

Per code oriented si intende anzitutto immediata operativita', nel senso che
non ci saranno pagine da sfogliare ma solo e soprattutto righe di codice da
leggere ed interpretare, commenti mirati inoltre saranno inseriti all'interno
del codice stesso laddove ce ne sia bisogno.

I libri talvolta si perdono in inutili dettagli, tralasciando troppo spesso
il codice, L-<PL> invece si pone l'obiettivo di fare il lavoro opposto, e
rendere al codice la giusta collocazione che merita, ossia di primo attore
indiscusso.

Oltre alle regole fondamentali di ciascun linguaggio di programmazione, 
indipendentemente dal paradigma utilizzato, si prestera' particolare 
attenzione alle tecniche per scrivere codice di qualita' e sicuro.

Al momento della stesura di questo documento sono stati scelti due paradigmi
di programmazione e due linguaggi specifici; il paradigma Object Oriented 
con il linguaggio C++ e il paradigma procedurale con il linguaggio C.

Infine un ulteriore repository sara' dedicato alla programmazione di sistema
su sistemi operativi UNIX con kernel Linux.

##############################################################################
 LEARNING-<Linux Programming> - Programmazione di sistema (GNU/Linux)
##############################################################################
Il presente repository riguarda la programmazione di sistema su sistemi
operativi UNIX con kernel Linux, pertanto Ã¨ stato contrassegnato come L-LP.

Ciascun sorgente potra' essere compilato mediante il compilatore GCC:
$ gcc main.c -o main

Tuttavia, se si volesse compilare con maggiore accortezza, sia per l'eventuale
debug sia per avere a disposizione maggiori informazioni in caso di errore, 
si possono utilizzare i seguenti parametri:
$ gcc -g main.c  -Wall -W -D_GNU_SOURCE -pedantic

La versione di GCC utilizzata e' la seguente:
gcc (Debian 4.4.5-2) 4.4.5

Allorquando si iniziera' a lavorare con progetti di medie dimensioni si
utilizzeranno ulteriori tecniche e soprattutto nuovi tool per la compilazione, 
come ad esempio gli autotools.

I nomi delle directory sono state denominate seguendo i capitoli dello Stevens
"Advanced Programming in the UNIX Environment 2nd", ma il codice sorgente e'
totalmente nuovo, lo si consideri come una dedica nei confronti di uno dei
piu' illustri informatici del XX secolo; per intenderci, se si scrive un
listato sull'IO non bufferizzato, i relativi file saranno collocati nella
directory File I/O, e cosi' via discorrendo.

##############################################################################
 Linee guida per la scrittura dei listati
##############################################################################
 INTESTAZIONI 

/*

Prototipo/i:
	void prototipo(parametri);

Note:
	Note sul programma in uso, breve descrizione

*/

 CODICE

##############################################################################
INFO
##############################################################################
Per commenti, info e quant'altro: <behemoth _at_ autistici _dot_ org >
